{% comment %}

Props:
  video:      Shopify video object - Video Object from theme and section schema
  video_url:  Shopify video_url - Video asset url from Shopify video_url schema setting from either youtube or vimeo
  media:      Shopify media object - (Optional) Used only when referencing product media or file_reference metafield
  poster_url: String - (Optional) image to display before playback occurs on native video elements
  controls:   Boolean - (Default: false) Enable video controls
  autoplay:   Boolean - (Default: true) Enable playback as soon as the video is loaded
  muted:      Boolean - (Default: true) Disable any audio tracks on the video. Note: This must be set to true for autoplay to work on certain browsers.
  loop:       Boolean - (Default: true) Allow automatically restarting a video after it ends
  width:      Int - (Optional) video width
  lazyload:   Boolean - (Default: false) Determines whether videos loaded within iframes are loaded lazily

Usage:

  Render video with a Shopify video object from section schema
  {%- render 'video' with section.settings.video -%}

  Render video from a Shopify video_url theme or section schema (Accepts Youtube and Vimeo URLs)
  {%- render 'video',
    video_url: section.settings.video
  -%}

  Render media object from a product's media library or file_reference metafield
  {%- render 'video',
    media: product.metafields.media.featured_video
  -%}

  Render video object with that autoplays and loops with no sound
  {% render 'video' with section.settings.video,
    muted: true,
    controls: false,
    autoplay: true
  %}

  Render video object with that autoplays and loops with no sound
  {% render 'video' with section.settings.video,
    muted: true,
    controls: false,
    autoplay: true
  %}

{% endcomment %}

{% liquid
  # Autoplay - default true
  assign autoplay = autoplay | default: true, allow_false: true

  # Controls - default false
  assign controls = controls | default: false

  # Mute Video - default true
  assign muted = muted | default: true, allow_false: true

  # Video Looping - default true
  assign loop = loop | default: true, allow_false: true

  # Width
  assign width = width | default: '400x'

  # Ensure that width value has matches proper format: '400x'
  unless width contains 'x'
    assign width = width | append: 'x'
  endunless

  # Lazyloading -  default false
  if lazyload == true
    assign lazyload = 'lazy'
  else
    assign lazyload = 'eager'
  endif
%}

{%- if video -%}
  {% comment %}
  video (Video Object):
  Used when a video object is passed in from theme or section schema settings
  {% endcomment %}

  {{- video | video_tag: image_size: width, autoplay: autoplay, loop: loop, muted: muted, controls: controls, poster: poster_url -}}

{%- elsif video_url -%}
  {% comment %}
  video_url (string):
  Used when a video_url string is passed in representing a video from Vimeo or Youtube
  {% endcomment %}

  {%- if video_url.type == 'youtube' -%}
    {%- capture video_params -%}
      &autoplay={%- if autoplay -%}1{%- else -%}0{%- endif -%}
      &controls={%- if controls -%}1{%- else -%}0{%- endif -%}
      &loop={%- if loop -%}1{%- else -%}0{%- endif -%}
    {%- endcapture -%}

    <iframe src="https://www.youtube.com/embed/{{ video_url.id }}?enablejsapi=1{{- video_params -}}" allow="{%- if autoplay -%}autoplay;{%- endif -%} encrypted-media" allowfullscreen title="{{ section.settings.description | escape }}"></iframe>
  {%- elsif video_url.type == 'vimeo' -%}
    {%- capture video_params -%}
      &autoplay={{- autoplay -}}
      &controls={{- controls -}}
      &loop={{- loop -}}
      &muted={{- muted -}}
    {%- endcapture -%}

    <iframe src="https://player.vimeo.com/video/{{ video_url.id }}{{- video_params -}}" allow="{%- if autoplay -%}autoplay;{%- endif -%} encrypted-media" allowfullscreen title="{{ section.settings.description | escape }}"></iframe>
  {%- endif -%}

{%- elsif media -%}
  {% comment %}
  media (Media Object):
  Used when a video object is passed in from a product media gallery or metafield
  {% endcomment %}

  {%- if media.media_type == 'external_video' -%}
    {% comment %}
    The external_video_url filter uses a different format for applying video parameters
    {% endcomment %}

    {%- if autoplay == false -%}
      {%- assign autoplay = '0' -%}
    {%- else -%}
      {%- assign autoplay = '1' -%}
    {%- endif -%}

    {%- if controls == false -%}
      {%- assign controls = '0' -%}
    {%- else -%}
      {%- assign controls = '1' -%}
    {%- endif -%}

    {%- if loop == false -%}
      {%- assign loop = '0' -%}
    {%- else -%}
      {%- assign loop = '1' -%}
    {%- endif -%}

    {%- if muted == false -%}
      {%- assign muted = '0' -%}
    {%- else -%}
      {%- assign muted = '1' -%}
    {%- endif -%}

    {{- media | external_video_url: autoplay: autoplay, loop: loop, mute: muted, controls: controls, playlist: media.external_id | external_video_tag -}}
  {%- elsif media.media_type == 'video' -%}
    {{- media | video_tag: image_size: width, autoplay: autoplay, loop: loop, muted: muted, controls: controls, poster: poster_url -}}
  {%- endif -%}
{%- endif -%}
